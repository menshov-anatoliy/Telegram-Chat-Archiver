using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System.Text;
using Telegram.HostedApp.Configuration;
using Telegram.HostedApp.Models;

namespace Telegram.HostedApp.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Markdown —Ñ–æ—Ä–º–∞—Ç–µ
/// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª—ã —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–∞–º
/// </summary>
public class MarkdownArchiver
{
	private readonly ILogger<MarkdownArchiver> _logger;
	private readonly ArchiveConfig _config;
	private readonly object _lockObject = new();

	public MarkdownArchiver(ILogger<MarkdownArchiver> logger, IOptions<ArchiveConfig> config)
	{
		_logger = logger;
		_config = config.Value;
	}

	/// <summary>
	/// –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞—Ä—Ö–∏–≤ (–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ)
	/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	/// </summary>
	/// <param name="message">–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</param>
	/// <param name="chatTitle">–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞</param>
	/// <param name="cancellationToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã</param>
	public Task AppendMessageAsync(ChatMessage message, string chatTitle, CancellationToken cancellationToken = default)
	{
		try
		{
			var filePath = GetMarkdownFilePath(chatTitle, message.Date);
			var directory = Path.GetDirectoryName(filePath);

			// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
			if (!string.IsNullOrEmpty(directory) && !Directory.Exists(directory))
			{
				Directory.CreateDirectory(directory);
				_logger.LogDebug("–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {Directory}", directory);
			}

			var messageMarkdown = FormatMessage(message);

			// –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å
			lock (_lockObject)
			{
				// –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
				if (!File.Exists(filePath))
				{
					var header = GenerateFileHeader(chatTitle, message.Date);
					File.WriteAllText(filePath, header + messageMarkdown, Encoding.UTF8);
				}
				else
				{
					// –î–æ–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
					File.AppendAllText(filePath, messageMarkdown, Encoding.UTF8);
				}
			}

			_logger.LogDebug("–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {MessageId} –≤ —Ñ–∞–π–ª: {FilePath}", message.Id, filePath);
		}
		catch (Exception ex)
		{
			_logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {MessageId} –≤ –∞—Ä—Ö–∏–≤", message.Id);
			throw;
		}

		return Task.CompletedTask;
	}

	/// <summary>
	/// –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ Markdown —Ñ–∞–π–ª—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
	/// –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ –¥–∞—Ç–µ (–ì–ì–ì–ì-–ú–ú-–î–î.md)
	/// </summary>
	/// <param name="chatTitle">–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞</param>
	/// <param name="date">–î–∞—Ç–∞</param>
	/// <returns>–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É</returns>
	public string GetMarkdownFilePath(string chatTitle, DateTime date)
	{
		var sanitizedChatTitle = SanitizeFileName(chatTitle);
		var fileName = $"{date:yyyy-MM-dd}.md";

		return Path.Combine(_config.OutputPath, sanitizedChatTitle, fileName);
	}

	/// <summary>
	/// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ñ–∞–π–ª–∞
	/// </summary>
	private string GenerateFileHeader(string chatTitle, DateTime date)
	{
		var sb = new StringBuilder();
		sb.AppendLine($"# {EscapeMarkdown(chatTitle)}");
		sb.AppendLine();
		sb.AppendLine($"**–î–∞—Ç–∞:** {date:yyyy-MM-dd}");
		sb.AppendLine();
		sb.AppendLine("---");
		sb.AppendLine();

		return sb.ToString();
	}

	/// <summary>
	/// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Markdown
	/// </summary>
	private string FormatMessage(ChatMessage message)
	{
		var sb = new StringBuilder();

		// –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –∏ –∞–≤—Ç–æ—Ä
		sb.AppendLine($"## {message.Date:HH:mm:ss} - {EscapeMarkdown(message.AuthorName ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")}");
		sb.AppendLine();

		// –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
		switch (message.Type)
		{
			case MessageType.Text:
				if (!string.IsNullOrEmpty(message.Text))
					sb.AppendLine(EscapeMarkdown(message.Text));
				break;

			case MessageType.Photo:
				sb.AppendLine("üì∑ **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ**");
				if (message.Media?.LocalPath != null)
					sb.AppendLine($"![–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]({GetRelativeMediaPath(message.Media.LocalPath)})");
				if (!string.IsNullOrEmpty(message.Text))
					sb.AppendLine($"*–û–ø–∏—Å–∞–Ω–∏–µ:* {EscapeMarkdown(message.Text)}");
				break;

			case MessageType.Document:
				sb.AppendLine("üìÑ **–î–æ–∫—É–º–µ–Ω—Ç**");
				if (message.Media != null)
				{
					sb.AppendLine($"*–§–∞–π–ª:* {EscapeMarkdown(message.Media.FileName ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}");
					if (message.Media.FileSize.HasValue)
						sb.AppendLine($"*–†–∞–∑–º–µ—Ä:* {FormatFileSize(message.Media.FileSize.Value)}");
					if (message.Media.LocalPath != null)
						sb.AppendLine($"[–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª]({GetRelativeMediaPath(message.Media.LocalPath)})");
				}
				if (!string.IsNullOrEmpty(message.Text))
					sb.AppendLine($"*–û–ø–∏—Å–∞–Ω–∏–µ:* {EscapeMarkdown(message.Text)}");
				break;

			case MessageType.Voice:
				sb.AppendLine("üéµ **–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**");
				if (message.Media?.Duration.HasValue == true)
					sb.AppendLine($"*–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {TimeSpan.FromSeconds(message.Media.Duration.Value):mm\\:ss}");
				if (message.Media?.LocalPath != null)
					sb.AppendLine($"[–ê—É–¥–∏–æ—Ñ–∞–π–ª]({GetRelativeMediaPath(message.Media.LocalPath)})");
				break;

			case MessageType.Video:
				sb.AppendLine("üé¨ **–í–∏–¥–µ–æ**");
				if (message.Media != null)
				{
					if (message.Media.Duration.HasValue)
						sb.AppendLine($"*–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {TimeSpan.FromSeconds(message.Media.Duration.Value):mm\\:ss}");
					if (message.Media.Width.HasValue && message.Media.Height.HasValue)
						sb.AppendLine($"*–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ:* {message.Media.Width}x{message.Media.Height}");
					if (message.Media.LocalPath != null)
						sb.AppendLine($"[–í–∏–¥–µ–æ—Ñ–∞–π–ª]({GetRelativeMediaPath(message.Media.LocalPath)})");
				}
				if (!string.IsNullOrEmpty(message.Text))
					sb.AppendLine($"*–û–ø–∏—Å–∞–Ω–∏–µ:* {EscapeMarkdown(message.Text)}");
				break;

			case MessageType.Sticker:
				sb.AppendLine("üòÑ **–°—Ç–∏–∫–µ—Ä**");
				if (message.Media?.LocalPath != null)
					sb.AppendLine($"![–°—Ç–∏–∫–µ—Ä]({GetRelativeMediaPath(message.Media.LocalPath)})");
				break;

			default:
				sb.AppendLine("‚ùì **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è**");
				if (!string.IsNullOrEmpty(message.Text))
					sb.AppendLine(EscapeMarkdown(message.Text));
				break;
		}

		// –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
		if (message.ReplyToMessageId.HasValue)
			sb.AppendLine($"*‚Ü©Ô∏è –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {message.ReplyToMessageId.Value}*");

		// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
		if (message.IsEdited)
			sb.AppendLine($"*‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {message.EditDate:HH:mm:ss}*");

		// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ—Å—ã–ª–∫–µ
		if (message.ForwardInfo != null)
		{
			sb.AppendLine($"*üì§ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç: {EscapeMarkdown(message.ForwardInfo.FromName ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")} ({message.ForwardInfo.OriginalDate:HH:mm:ss})*");
		}

		sb.AppendLine();
		sb.AppendLine("---");
		sb.AppendLine();

		return sb.ToString();
	}

	/// <summary>
	/// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
	/// </summary>
	private string EscapeMarkdown(string text)
	{
		if (string.IsNullOrEmpty(text))
			return string.Empty;

		return text
			.Replace("\\", "\\\\")
			.Replace("*", "\\*")
			.Replace("_", "\\_")
			.Replace("[", "\\[")
			.Replace("]", "\\]")
			.Replace("(", "\\(")
			.Replace(")", "\\)")
			.Replace("#", "\\#")
			.Replace("+", "\\+")
			.Replace("-", "\\-")
			.Replace(".", "\\.")
			.Replace("!", "\\!");
	}

	/// <summary>
	/// –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
	/// </summary>
	private string SanitizeFileName(string fileName)
	{
		if (string.IsNullOrEmpty(fileName))
			return "Unknown";

		var invalidChars = Path.GetInvalidFileNameChars();
		var sanitized = new StringBuilder();

		foreach (char c in fileName)
		{
			if (invalidChars.Contains(c) || c == ' ')
				sanitized.Append('_');
			else
				sanitized.Append(c);
		}

		return sanitized.ToString().Trim();
	}

	/// <summary>
	/// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
	/// </summary>
	private string FormatFileSize(long bytes)
	{
		string[] sizes = { "B", "KB", "MB", "GB", "TB" };
		double len = bytes;
		int order = 0;

		while (len >= 1024 && order < sizes.Length - 1)
		{
			order++;
			len = len / 1024;
		}

		return $"{len:0.##} {sizes[order]}";
	}

	/// <summary>
	/// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª—É
	/// </summary>
	private string GetRelativeMediaPath(string localPath)
	{
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –ø–∞–ø–∫–∏ –∞—Ä—Ö–∏–≤–∞ –∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª—É
		var archiveDir = Path.GetFullPath(_config.OutputPath);
		var mediaFullPath = Path.GetFullPath(localPath);

		return Path.GetRelativePath(archiveDir, mediaFullPath).Replace("\\", "/");
	}
}