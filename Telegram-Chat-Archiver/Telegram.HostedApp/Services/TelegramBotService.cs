using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System.Text;
using Telegram.Bot;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.HostedApp.Configuration;

namespace Telegram.HostedApp.Services;

/// <summary>
/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
/// </summary>
public class TelegramBotService : ITelegramBotService, IDisposable
{
	private readonly ILogger<TelegramBotService> _logger;
	private readonly BotConfig _config;
	private readonly TelegramBotClient? _botClient;
	private readonly CancellationTokenSource _cancellationTokenSource;
	private bool _disposed;
	private bool _isListening;
	private bool _isShuttingDown;
	private ISystemStatusProvider? _statusProvider;
	private int _pollingRetryCount;
	private static readonly SemaphoreSlim _instanceLock = new(1, 1);
	private static volatile bool _globalPollingActive = false;

	public TelegramBotService(
		ILogger<TelegramBotService> logger,
		IOptions<BotConfig> config)
	{
		_logger = logger;
		_config = config.Value;
		_cancellationTokenSource = new CancellationTokenSource();

		if (!string.IsNullOrEmpty(_config.BotToken))
		{
			_botClient = new TelegramBotClient(_config.BotToken);
		}
		else
		{
			_logger.LogWarning("Bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, Bot API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
		}
	}

	/// <summary>
	/// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
	/// </summary>
	public void SetStatusProvider(ISystemStatusProvider statusProvider)
	{
		_statusProvider = statusProvider;
	}

	/// <summary>
	/// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	/// </summary>
	public async Task SendAdminMessageAsync(string message, CancellationToken cancellationToken = default)
	{
		if (_botClient == null || _config.AdminUserId == 0 || !_config.EnableBotNotifications)
		{
			_logger.LogDebug("Bot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è: {Message}", message);
			return;
		}

		try
		{
			_logger.LogDebug("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (ID: {AdminUserId}): {Message}", 
				_config.AdminUserId, message);

			await _botClient.SendTextMessageAsync(
				chatId: _config.AdminUserId,
				text: TruncateMessage(message),
				parseMode: ParseMode.Html,
				cancellationToken: cancellationToken);

			_logger.LogDebug("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É");
			
			// –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
			if (_config.MessageDelayMs > 0)
			{
				await Task.Delay(_config.MessageDelayMs, cancellationToken);
			}
		}
		catch (ApiRequestException apiEx) when (apiEx.Message.Contains("chat not found"))
		{
			_logger.LogWarning("–ß–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: {AdminUserId}). " +
				"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start. " +
				"–°–æ–æ–±—â–µ–Ω–∏–µ: {Message}", _config.AdminUserId, message);
			
			// –ù–µ –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
		}
		catch (ApiRequestException apiEx) when (apiEx.Message.Contains("bot was blocked"))
		{
			_logger.LogWarning("–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (ID: {AdminUserId}). " +
				"–°–æ–æ–±—â–µ–Ω–∏–µ: {Message}", _config.AdminUserId, message);
		}
		catch (ApiRequestException apiEx) when (apiEx.Message.Contains("user not found"))
		{
			_logger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: {AdminUserId}). " +
				"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å AdminUserId –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. " +
				"–°–æ–æ–±—â–µ–Ω–∏–µ: {Message}", _config.AdminUserId, message);
		}
		catch (ApiRequestException apiEx)
		{
			_logger.LogError(apiEx, "–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (ID: {AdminUserId}): {ApiError}. " +
				"–°–æ–æ–±—â–µ–Ω–∏–µ: {Message}", _config.AdminUserId, apiEx.Message, message);
		}
		catch (Exception ex)
		{
			_logger.LogError(ex, "–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (ID: {AdminUserId}). " +
				"–°–æ–æ–±—â–µ–Ω–∏–µ: {Message}", _config.AdminUserId, message);
		}
	}

	/// <summary>
	/// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
	/// </summary>
	public async Task SendErrorNotificationAsync(string error, Exception? exception = null, CancellationToken cancellationToken = default)
	{
		var errorMessage = new StringBuilder();
		errorMessage.AppendLine("üö® <b>–û—à–∏–±–∫–∞ –≤ Telegram Chat Archiver</b>");
		errorMessage.AppendLine();
		errorMessage.AppendLine($"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {error}");
		
		if (exception != null)
		{
			errorMessage.AppendLine($"<b>–¢–∏–ø:</b> {exception.GetType().Name}");
			errorMessage.AppendLine($"<b>–î–µ—Ç–∞–ª–∏:</b> <code>{exception.Message}</code>");
		}
		
		errorMessage.AppendLine($"<b>–í—Ä–µ–º—è:</b> {DateTime.Now:yyyy-MM-dd HH:mm:ss}");

		await SendAdminMessageAsync(errorMessage.ToString(), cancellationToken);
	}

	/// <summary>
	/// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
	/// </summary>
	public async Task SendStatisticsReportAsync(object statistics, CancellationToken cancellationToken = default)
	{
		if (statistics == null) return;

		var report = new StringBuilder();
		report.AppendLine("üìä <b>–û—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è</b>");
		report.AppendLine();

		// –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
		// –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º ToString()
		report.AppendLine($"<code>{statistics}</code>");
		
		report.AppendLine($"<b>–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞:</b> {DateTime.Now:yyyy-MM-dd HH:mm:ss}");

		await SendAdminMessageAsync(report.ToString(), cancellationToken);
	}

	/// <summary>
	/// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	/// </summary>
	public async Task<string> ProcessManagementCommandAsync(string command, long userId, CancellationToken cancellationToken = default)
	{
		// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		if (command.ToLower() == "/start")
		{
			if (userId == _config.AdminUserId)
			{
				_logger.LogInformation("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (ID: {AdminUserId}) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º", userId);
				return "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! Telegram Chat Archiver –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.";
			}
			else
			{
				_logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {UserId}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞", userId);
				return $"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à Telegram ID: <code>{userId}</code>\n\n" +
					   "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram Chat Archiver. " +
					   "–î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.\n\n" +
					   "–ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à ID –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.";
			}
		}

		// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ ID (–¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º)
		if (command.ToLower() == "/myid")
		{
			return $"üÜî –í–∞—à Telegram ID: <code>{userId}</code>\n\n" +
				   "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç ID –∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ AdminUserId –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞.";
		}

		// –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
		if (userId != _config.AdminUserId)
		{
			_logger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {UserId}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {Command}", 
				userId, command);
			return "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.";
		}

		return command.ToLower() switch
		{
			"/status" => await GetStatusAsync(),
			"/stats" => await GetStatisticsAsync(),
			"/help" => GetHelpMessage(),
			"/restart_bot" => await RestartBotPollingAsync(),
			"/test_notifications" => await TestNotificationsAsync(),
			_ => "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
		};
	}

	/// <summary>
	/// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	/// </summary>
	private async Task<string> TestNotificationsAsync()
	{
		try
		{
			await SendAdminMessageAsync("üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
			return "‚úÖ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ";
		}
		catch (Exception ex)
		{
			_logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
			return $"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {ex.Message}";
		}
	}

	/// <summary>
	/// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞
	/// </summary>
	public async Task<bool> IsBotAvailableAsync()
	{
		if (_botClient == null) return false;

		try
		{
			var me = await _botClient.GetMeAsync();
			_logger.LogDebug("Bot –¥–æ—Å—Ç—É–ø–µ–Ω: @{Username} (ID: {BotId})", me.Username, me.Id);
			
			// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –º–æ–∂–µ–º –ª–∏ –º—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
			if (_config.AdminUserId != 0 && _config.EnableBotNotifications)
			{
				await ValidateAdminAccessAsync();
			}
			
			return true;
		}
		catch (Exception ex)
		{
			_logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞");
			return false;
		}
	}

	/// <summary>
	/// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	/// </summary>
	private async Task ValidateAdminAccessAsync()
	{
		try
		{
			// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
			var chat = await _botClient!.GetChatAsync(_config.AdminUserId);
			_logger.LogInformation("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω: {FirstName} {LastName} (@{Username})", 
				chat.FirstName, chat.LastName, chat.Username);
		}
		catch (ApiRequestException apiEx) when (apiEx.Message.Contains("chat not found"))
		{
			_logger.LogWarning("‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (ID: {AdminUserId}) –Ω–µ –Ω–∞–π–¥–µ–Ω. " +
				"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞.", 
				_config.AdminUserId);
		}
		catch (ApiRequestException apiEx) when (apiEx.Message.Contains("user not found"))
		{
			_logger.LogError("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {AdminUserId} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. " +
				"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å AdminUserId –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.", _config.AdminUserId);
		}
		catch (Exception ex)
		{
			_logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (ID: {AdminUserId})", 
				_config.AdminUserId);
		}
	}

	/// <summary>
	/// –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
	/// </summary>
	public async Task StartListeningAsync(CancellationToken cancellationToken = default)
	{
		if (_botClient == null || !_config.EnableManagementCommands || _isShuttingDown)
		{
			_logger.LogDebug("Bot –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω: BotClient={BotClientExists}, EnableCommands={EnableCommands}, ShuttingDown={ShuttingDown}", 
				_botClient != null, _config.EnableManagementCommands, _isShuttingDown);
			return;
		}

		await _instanceLock.WaitAsync(cancellationToken);
		try
		{
			if (_globalPollingActive)
			{
				_logger.LogWarning("Polling —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –≤ –¥—Ä—É–≥–æ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫");
				return;
			}

			if (_isListening)
			{
				_logger.LogDebug("Bot —É–∂–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã");
				return;
			}

			await StartPollingWithRetryAsync(cancellationToken);
		}
		finally
		{
			_instanceLock.Release();
		}
	}

	/// <summary>
	/// –ó–∞–ø—É—Å–∫ polling —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
	/// </summary>
	private async Task StartPollingWithRetryAsync(CancellationToken cancellationToken)
	{
		for (int attempt = 1; attempt <= _config.MaxPollingRetries; attempt++)
		{
			try
			{
				_logger.LogInformation("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ #{Attempt}", attempt);

				// –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ pending updates
				await ForceCleanupPendingUpdatesAsync();

				var receiverOptions = new ReceiverOptions
				{
					AllowedUpdates = new[] { UpdateType.Message }, // –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è
					Limit = 1, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞ —Ä–∞–∑
					ThrowPendingUpdates = true // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
				};

				// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏
				using var pollingCts = CancellationTokenSource.CreateLinkedTokenSource(
					_cancellationTokenSource.Token, cancellationToken);

				_botClient!.StartReceiving(
					updateHandler: HandleUpdateAsync,
					pollingErrorHandler: HandlePollingErrorAsync,
					receiverOptions: receiverOptions,
					cancellationToken: pollingCts.Token
				);

				_isListening = true;
				_globalPollingActive = true;
				_pollingRetryCount = 0;
				
				_logger.LogInformation("–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");

				// –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
				// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /start
				_logger.LogInformation("Bot –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –∫–æ–º–∞–Ω–¥. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å /start –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞.");
				return; // –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
			}
			catch (ApiRequestException apiEx) when (apiEx.Message.Contains("Conflict"))
			{
				_logger.LogWarning("–ö–æ–Ω—Ñ–ª–∏–∫—Ç polling –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ #{Attempt}: {Message}", attempt, apiEx.Message);
				
				if (attempt < _config.MaxPollingRetries)
				{
					var delay = _config.PollingRetryDelayMs * attempt; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
					_logger.LogInformation("–û–∂–∏–¥–∞–Ω–∏–µ {Delay}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π", delay);
					await Task.Delay(delay, cancellationToken);
					
					// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
					await ForceCleanupPendingUpdatesAsync();
				}
			}
			catch (Exception ex)
			{
				_logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ #{Attempt})", attempt);
				
				if (attempt < _config.MaxPollingRetries)
				{
					await Task.Delay(_config.PollingRetryDelayMs, cancellationToken);
				}
			}
		}

		_logger.LogError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –ø–æ—Å–ª–µ {MaxRetries} –ø–æ–ø—ã—Ç–æ–∫", _config.MaxPollingRetries);
	}

	/// <summary>
	/// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ pending updates
	/// </summary>
	private async Task ForceCleanupPendingUpdatesAsync()
	{
		try
		{
			if (_botClient == null) return;

			_logger.LogDebug("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ pending updates...");
			
			// –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
			var updates = await _botClient.GetUpdatesAsync(limit: 100, timeout: 1);
			
			if (updates.Length > 0)
			{
				_logger.LogInformation("–ù–∞–π–¥–µ–Ω–æ {UpdateCount} pending updates, –æ—á–∏—â–∞–µ–º...", updates.Length);
				
				// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è + —Å–¥–≤–∏–≥–∞–µ–º offset
				var lastUpdateId = updates[updates.Length - 1].Id;
				await _botClient.GetUpdatesAsync(offset: lastUpdateId + 1, limit: 1, timeout: 1);
				
				// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–æ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
				var remainingUpdates = await _botClient.GetUpdatesAsync(limit: 1, timeout: 1);
				if (remainingUpdates.Length > 0)
				{
					_logger.LogDebug("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è updates...");
					await _botClient.GetUpdatesAsync(offset: remainingUpdates[0].Id + 1, limit: 1, timeout: 1);
				}
				
				_logger.LogInformation("Pending updates –æ—á–∏—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
			}
			else
			{
				_logger.LogDebug("Pending updates –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç");
			}
		}
		catch (Exception ex)
		{
			_logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É pending updates");
		}
	}

	/// <summary>
	/// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
	/// </summary>
	public async Task StopListeningAsync()
	{
		if (!_isListening || _botClient == null) 
		{
			_logger.LogDebug("Bot —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
			return;
		}

		await _instanceLock.WaitAsync();
		try
		{
			_isShuttingDown = true;
			_logger.LogInformation("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞");

			// –û—Ç–º–µ–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ receiving
			_cancellationTokenSource.Cancel();

			// –ñ–¥–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
			await Task.Delay(3000);

			_isListening = false;
			_globalPollingActive = false;
			
			_logger.LogInformation("–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ (–Ω–æ –Ω–µ –∂–¥–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã)
			try
			{
				using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5));
				await SendAdminMessageAsync("‚èπÔ∏è Telegram Chat Archiver –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", cts.Token);
			}
			catch (Exception ex)
			{
				_logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ");
			}
		}
		finally
		{
			_instanceLock.Release();
		}
	}

	/// <summary>
	/// –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ polling –±–æ—Ç–∞
	/// </summary>
	private async Task<string> RestartBotPollingAsync()
	{
		try
		{
			_logger.LogInformation("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ polling –±–æ—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
			
			await StopListeningAsync();
			await Task.Delay(2000); // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
			await StartListeningAsync();
			
			return "üîÑ Polling –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ";
		}
		catch (Exception ex)
		{
			_logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ polling –±–æ—Ç–∞");
			return $"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {ex.Message}";
		}
	}

	private async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
	{
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –æ—Ç–º–µ–Ω–µ–Ω —Ç–æ–∫–µ–Ω
		if (cancellationToken.IsCancellationRequested || _cancellationTokenSource.Token.IsCancellationRequested || _isShuttingDown)
		{
			return;
		}

		if (update.Message is not { } message)
			return;

		if (message.Text is not { } messageText)
			return;

		_logger.LogDebug("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {Text} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", messageText, message.From?.Id);

		try
		{
			var response = await ProcessManagementCommandAsync(messageText, message.From?.Id ?? 0, cancellationToken);
			
			await botClient.SendTextMessageAsync(
				chatId: message.Chat.Id,
				text: response,
				parseMode: ParseMode.Html,
				cancellationToken: cancellationToken);
		}
		catch (OperationCanceledException)
		{
			_logger.LogDebug("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–∞");
		}
		catch (Exception ex)
		{
			_logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã");
			
			try
			{
				await botClient.SendTextMessageAsync(
					chatId: message.Chat.Id,
					text: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã",
					cancellationToken: cancellationToken);
			}
			catch (Exception sendEx)
			{
				_logger.LogError(sendEx, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ");
			}
		}
	}

	private Task HandlePollingErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
	{
		// –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∞, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
		if (cancellationToken.IsCancellationRequested || _cancellationTokenSource.Token.IsCancellationRequested || _isShuttingDown)
		{
			_logger.LogDebug("Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Ç–æ–∫–µ–Ω—É –æ—Ç–º–µ–Ω—ã –∏–ª–∏ shutdown");
			return Task.CompletedTask;
		}

		var errorMessage = exception switch
		{
			ApiRequestException apiRequestException => HandleApiRequestException(apiRequestException),
			_ => exception.ToString()
		};

		// –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç (–∫–æ—Ç–æ—Ä—ã–π –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º)
		if (exception is ApiRequestException apiEx && apiEx.Message.Contains("Conflict"))
		{
			_logger.LogWarning("–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤ Bot API (–±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω): {ErrorMessage}", errorMessage);
		}
		else
		{
			_logger.LogError(exception, "–û—à–∏–±–∫–∞ –≤ Bot API: {ErrorMessage}", errorMessage);
		}
		
		return Task.CompletedTask;
	}

	private string HandleApiRequestException(ApiRequestException apiRequestException)
	{
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ API
		if (apiRequestException.Message.Contains("Conflict: terminated by other getUpdates request"))
		{
			_logger.LogWarning("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç getUpdates. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π polling.");
			
			// –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
			_isListening = false;
			_globalPollingActive = false;
			
			// –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
			_ = Task.Run(async () =>
			{
				await Task.Delay(TimeSpan.FromSeconds(10));
				if (!_isShuttingDown && !_isListening)
				{
					_logger.LogInformation("–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞");
					try
					{
						await StartListeningAsync();
					}
					catch (Exception ex)
					{
						_logger.LogError(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å–ª–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞");
					}
				}
			});
			
			return "–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)";
		}

		return $"Telegram API Error:\n[{apiRequestException.ErrorCode}]\n{apiRequestException.Message}";
	}

	private async Task<string> GetStatusAsync()
	{
		var status = new StringBuilder();
		status.AppendLine("üîÑ <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>");
		
		if (_statusProvider != null)
		{
			var isConnected = await _statusProvider.IsTelegramConnectedAsync();
			status.AppendLine($"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram: {(isConnected ? "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" : "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")}");
		}
		else
		{
			status.AppendLine("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram: ‚ùì –°—Ç–∞—Ç—É—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
		}
		
		status.AppendLine($"Bot –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ: {(_isListening ? "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" : "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ")}");
		status.AppendLine($"–ì–ª–æ–±–∞–ª—å–Ω—ã–π polling: {(_globalPollingActive ? "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" : "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω")}");
		status.AppendLine($"–ü–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {_pollingRetryCount}");
		status.AppendLine($"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
		
		return status.ToString();
	}

	private async Task<string> GetStatisticsAsync()
	{
		if (_statusProvider != null)
		{
			return await _statusProvider.GetSystemStatisticsAsync();
		}
		
		return "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.";
	}

	private static string GetHelpMessage()
	{
		return """
			   üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
			   
			   üîß <b>–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
			   /start - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º
			   /myid - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π Telegram ID
			   
			   ‚öôÔ∏è <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>
			   /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
			   /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
			   /test_notifications - –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
			   /restart_bot - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Bot polling
			   /help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
			   
			   üí° <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—à–∏–±–∫–∏ "chat not found", 
			   –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞.
			   
			   üîë <b>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /myid –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ ID
			   –∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ AdminUserId –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
			   """;
	}

	private string TruncateMessage(string message)
	{
		if (message.Length <= _config.MaxMessageLength)
			return message;

		return message[..(_config.MaxMessageLength - 3)] + "...";
	}

	public void Dispose()
	{
		if (_disposed) return;

		try
		{
			_isShuttingDown = true;
			
			// –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
			if (_isListening)
			{
				StopListeningAsync().GetAwaiter().GetResult();
			}

			// –ó–∞—Ç–µ–º –æ—Ç–º–µ–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
			_cancellationTokenSource.Cancel();
			_cancellationTokenSource.Dispose();
			
			_globalPollingActive = false;
		}
		catch (Exception ex)
		{
			_logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ TelegramBotService");
		}
		finally
		{
			_disposed = true;
		}
	}
}