using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System.Text;
using Telegram.Bot;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.HostedApp.Configuration;

namespace Telegram.HostedApp.Services;

/// <summary>
/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
/// </summary>
public class TelegramBotService : ITelegramBotService, IDisposable
{
    private readonly ILogger<TelegramBotService> _logger;
    private readonly BotConfig _config;
    private readonly ITelegramArchiverService _archiverService;
    private readonly TelegramBotClient? _botClient;
    private readonly CancellationTokenSource _cancellationTokenSource;
    private bool _disposed;
    private bool _isListening;

    public TelegramBotService(
        ILogger<TelegramBotService> logger,
        IOptions<BotConfig> config,
        ITelegramArchiverService archiverService)
    {
        _logger = logger;
        _config = config.Value;
        _archiverService = archiverService;
        _cancellationTokenSource = new CancellationTokenSource();

        if (!string.IsNullOrEmpty(_config.BotToken))
        {
            _botClient = new TelegramBotClient(_config.BotToken);
        }
        else
        {
            _logger.LogWarning("Bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, Bot API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
        }
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    /// </summary>
    public async Task SendAdminMessageAsync(string message, CancellationToken cancellationToken = default)
    {
        if (_botClient == null || _config.AdminUserId == 0 || !_config.EnableBotNotifications)
        {
            _logger.LogDebug("Bot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è: {Message}", message);
            return;
        }

        try
        {
            await _botClient.SendTextMessageAsync(
                chatId: _config.AdminUserId,
                text: TruncateMessage(message),
                parseMode: ParseMode.Html,
                cancellationToken: cancellationToken);

            _logger.LogDebug("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {Message}", message);
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if (_config.MessageDelayMs > 0)
            {
                await Task.Delay(_config.MessageDelayMs, cancellationToken);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É");
        }
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    /// </summary>
    public async Task SendErrorNotificationAsync(string error, Exception? exception = null, CancellationToken cancellationToken = default)
    {
        var errorMessage = new StringBuilder();
        errorMessage.AppendLine("üö® <b>–û—à–∏–±–∫–∞ –≤ Telegram Chat Archiver</b>");
        errorMessage.AppendLine();
        errorMessage.AppendLine($"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {error}");
        
        if (exception != null)
        {
            errorMessage.AppendLine($"<b>–¢–∏–ø:</b> {exception.GetType().Name}");
            errorMessage.AppendLine($"<b>–î–µ—Ç–∞–ª–∏:</b> <code>{exception.Message}</code>");
        }
        
        errorMessage.AppendLine($"<b>–í—Ä–µ–º—è:</b> {DateTime.Now:yyyy-MM-dd HH:mm:ss}");

        await SendAdminMessageAsync(errorMessage.ToString(), cancellationToken);
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    /// </summary>
    public async Task SendStatisticsReportAsync(object statistics, CancellationToken cancellationToken = default)
    {
        if (statistics == null) return;

        var report = new StringBuilder();
        report.AppendLine("üìä <b>–û—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è</b>");
        report.AppendLine();

        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º ToString()
        report.AppendLine($"<code>{statistics}</code>");
        
        report.AppendLine($"<b>–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞:</b> {DateTime.Now:yyyy-MM-dd HH:mm:ss}");

        await SendAdminMessageAsync(report.ToString(), cancellationToken);
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    /// </summary>
    public async Task<string> ProcessManagementCommandAsync(string command, long userId, CancellationToken cancellationToken = default)
    {
        if (userId != _config.AdminUserId)
        {
            return "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.";
        }

        return command.ToLower() switch
        {
            "/start" => "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! Telegram Chat Archiver –∞–∫—Ç–∏–≤–µ–Ω.",
            "/status" => await GetStatusAsync(),
            "/stats" => await GetStatisticsAsync(),
            "/help" => GetHelpMessage(),
            _ => "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        };
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞
    /// </summary>
    public async Task<bool> IsBotAvailableAsync()
    {
        if (_botClient == null) return false;

        try
        {
            var me = await _botClient.GetMeAsync();
            _logger.LogDebug("Bot –¥–æ—Å—Ç—É–ø–µ–Ω: @{Username}", me.Username);
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞");
            return false;
        }
    }

    /// <summary>
    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    /// </summary>
    public async Task StartListeningAsync(CancellationToken cancellationToken = default)
    {
        if (_botClient == null || !_config.EnableManagementCommands || _isListening)
        {
            return;
        }

        _logger.LogInformation("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞");

        var receiverOptions = new ReceiverOptions
        {
            AllowedUpdates = Array.Empty<UpdateType>() // –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        };

        _botClient.StartReceiving(
            updateHandler: HandleUpdateAsync,
            pollingErrorHandler: HandlePollingErrorAsync,
            receiverOptions: receiverOptions,
            cancellationToken: cancellationToken
        );

        _isListening = true;

        // –û—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        await SendAdminMessageAsync("üöÄ Telegram Chat Archiver –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", cancellationToken);
    }

    /// <summary>
    /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    /// </summary>
    public async Task StopListeningAsync()
    {
        if (!_isListening) return;

        _logger.LogInformation("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞");
        _cancellationTokenSource.Cancel();
        _isListening = false;

        await SendAdminMessageAsync("‚èπÔ∏è Telegram Chat Archiver –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }

    private async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
    {
        if (update.Message is not { } message)
            return;

        if (message.Text is not { } messageText)
            return;

        _logger.LogDebug("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {Text} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", messageText, message.From?.Id);

        try
        {
            var response = await ProcessManagementCommandAsync(messageText, message.From?.Id ?? 0, cancellationToken);
            
            await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: response,
                parseMode: ParseMode.Html,
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã");
            
            await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã",
                cancellationToken: cancellationToken);
        }
    }

    private Task HandlePollingErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
    {
        var errorMessage = exception switch
        {
            ApiRequestException apiRequestException
                => $"Telegram API Error:\n[{apiRequestException.ErrorCode}]\n{apiRequestException.Message}",
            _ => exception.ToString()
        };

        _logger.LogError(exception, "–û—à–∏–±–∫–∞ –≤ Bot API: {ErrorMessage}", errorMessage);
        return Task.CompletedTask;
    }

    private async Task<string> GetStatusAsync()
    {
        var status = new StringBuilder();
        status.AppendLine("üîÑ <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>");
        
        var isConnected = await _archiverService.IsConnectedAsync();
        status.AppendLine($"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram: {(isConnected ? "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" : "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")}");
        
        status.AppendLine($"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
        
        return status.ToString();
    }

    private async Task<string> GetStatisticsAsync()
    {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤
        await Task.Delay(100); // –∑–∞–≥–ª—É—à–∫–∞
        
        return "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.";
    }

    private static string GetHelpMessage()
    {
        return """
               üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
               
               /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
               /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
               /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
               /help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
               """;
    }

    private string TruncateMessage(string message)
    {
        if (message.Length <= _config.MaxMessageLength)
            return message;

        return message[..(_config.MaxMessageLength - 3)] + "...";
    }

    public void Dispose()
    {
        if (_disposed) return;

        _cancellationTokenSource.Cancel();
        _cancellationTokenSource.Dispose();
        _disposed = true;
    }
}