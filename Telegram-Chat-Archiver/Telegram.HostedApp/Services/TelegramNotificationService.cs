using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System.Text;
using Telegram.HostedApp.Configuration;
using Telegram.HostedApp.Services.Interfaces;

namespace Telegram.HostedApp.Services;

/// <summary>
/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
/// </summary>
public class TelegramNotificationService : ITelegramNotificationService
{
	private readonly ILogger<TelegramNotificationService> _logger;
	private readonly ArchiveConfig _config;
	private readonly ITelegramBotService _botService;

	public TelegramNotificationService(
		ILogger<TelegramNotificationService> logger, 
		IOptions<ArchiveConfig> config,
		ITelegramBotService botService)
	{
		_logger = logger;
		_config = config.Value;
		_botService = botService;
	}

	/// <summary>
	/// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	/// </summary>
	public async Task SendErrorNotificationAsync(string error, Exception? exception = null, CancellationToken cancellationToken = default)
	{
		try
		{
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Bot API
			await _botService.SendErrorNotificationAsync(error, exception, cancellationToken);
		}
		catch (Exception ex)
		{
			_logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ");
			
			// Fallback: –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			var message = FormatErrorMessage(error, exception);
			_logger.LogWarning("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (fallback logging): {Message}", message);
		}
	}

	/// <summary>
	/// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	/// </summary>
	public async Task SendInfoNotificationAsync(string message, CancellationToken cancellationToken = default)
	{
		try
		{
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Bot API
			await _botService.SendAdminMessageAsync(message, cancellationToken);
		}
		catch (Exception ex)
		{
			_logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
			
			// Fallback: –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			var formattedMessage = FormatInfoMessage(message);
			_logger.LogInformation("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (fallback logging): {Message}", formattedMessage);
		}
	}

	/// <summary>
	/// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	/// </summary>
	public async Task<bool> IsNotificationChannelAvailableAsync()
	{
		try
		{
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Bot API
			return await _botService.IsBotAvailableAsync();
		}
		catch (Exception ex)
		{
			_logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
			return false;
		}
	}

	/// <summary>
	/// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
	/// </summary>
	private string FormatErrorMessage(string error, Exception? exception)
	{
		var sb = new StringBuilder();
		sb.AppendLine("üö® **–û–®–ò–ë–ö–ê –í TELEGRAM ARCHIVER**");
		sb.AppendLine();
		sb.AppendLine($"**–í—Ä–µ–º—è:** {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
		sb.AppendLine($"**–û—à–∏–±–∫–∞:** {error}");
		
		if (exception != null)
		{
			sb.AppendLine();
			sb.AppendLine("**–î–µ—Ç–∞–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è:**");
			sb.AppendLine($"```");
			sb.AppendLine($"{exception.GetType().Name}: {exception.Message}");
			if (!string.IsNullOrEmpty(exception.StackTrace))
			{
				// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä stack trace –¥–ª—è Telegram
				var stackTrace = exception.StackTrace;
				if (stackTrace.Length > 2000)
					stackTrace = stackTrace.Substring(0, 2000) + "...";
				sb.AppendLine(stackTrace);
			}
			sb.AppendLine($"```");
		}
		
		return sb.ToString();
	}

	/// <summary>
	/// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	/// </summary>
	private string FormatInfoMessage(string message)
	{
		var sb = new StringBuilder();
		sb.AppendLine("‚ÑπÔ∏è **TELEGRAM ARCHIVER**");
		sb.AppendLine();
		sb.AppendLine($"**–í—Ä–µ–º—è:** {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
		sb.AppendLine($"**–°–æ–æ–±—â–µ–Ω–∏–µ:** {message}");
		
		return sb.ToString();
	}
}