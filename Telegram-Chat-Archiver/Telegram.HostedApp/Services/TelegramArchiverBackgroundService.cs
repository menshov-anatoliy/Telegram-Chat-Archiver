using Microsoft.Extensions.Options;
using Telegram.HostedApp.Configuration;
using Telegram.HostedApp.Models;
using Telegram.HostedApp.Services.Interfaces;

namespace Telegram.HostedApp.Services;

/// <summary>
/// –§–æ–Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è Telegram —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
/// </summary>
public class TelegramArchiverBackgroundService(
	ILogger<TelegramArchiverBackgroundService> logger,
	IOptions<TelegramConfig> telegramConfig,
	IOptions<ArchiveConfig> archiveConfig,
	IOptions<BotConfig> botConfig,
	ITelegramArchiverService archiverService,
	ITelegramBotService botService,
	ISyncStateService syncStateService,
	IStatisticsService statisticsService,
	ITelegramNotificationService notificationService)
	: BackgroundService, ISystemStatusProvider
{
	private readonly TelegramConfig _telegramConfig = telegramConfig.Value;
	private readonly ArchiveConfig _archiveConfig = archiveConfig.Value;
	private readonly BotConfig _botConfig = botConfig.Value;

	/// <summary>
	/// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
	/// </summary>
	public async Task<bool> IsTelegramConnectedAsync()
	{
		try
		{
			return await archiverService.IsConnectedAsync();
		}
		catch
		{
			return false;
		}
	}

	/// <summary>
	/// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
	/// </summary>
	public async Task<string> GetSystemStatisticsAsync()
	{
		try
		{
			var statistics = await statisticsService.GetStatisticsAsync();
			return $"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n<code>{statistics}</code>";
		}
		catch (Exception ex)
		{
			logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
			return "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.";
		}
	}

	/// <summary>
	/// –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
	/// </summary>
	/// <param name="stoppingToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã</param>
	protected override async Task ExecuteAsync(CancellationToken stoppingToken)
	{
		logger.LogInformation("Telegram Archiver Service —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ");

		// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –¥–∞—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
		await Task.Delay(5000, stoppingToken);

		try
		{
			// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
			await InitializeServicesAsync(stoppingToken);

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
			if (!ValidateConfiguration())
			{
				logger.LogError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. Telegram —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã.");
				await NotifyConfigurationError(stoppingToken);
				// –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Å—å —Å–µ—Ä–≤–∏—Å, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º
				await WaitIndefinitelyAsync(stoppingToken);
				return;
			}

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram (—Å retry)
			var isConnected = await TryConnectToTelegramAsync(stoppingToken);
			if (!isConnected)
			{
				logger.LogError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API. Telegram —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã.");
				await NotifyConnectionError(stoppingToken);
				// –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Å—å —Å–µ—Ä–≤–∏—Å, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º
				await WaitIndefinitelyAsync(stoppingToken);
				return;
			}

			logger.LogInformation("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
			await notificationService.SendInfoNotificationAsync("Telegram Chat Archiver —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ API", stoppingToken);

			// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
			await statisticsService.LoadStatisticsAsync();

			// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
			await RunMainArchivingLoop(stoppingToken);
		}
		catch (OperationCanceledException)
		{
			logger.LogInformation("Telegram Archiver Service –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
		}
		catch (Exception ex)
		{
			logger.LogError(ex, "–û—à–∏–±–∫–∞ –≤ Telegram Archiver Service, –Ω–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É");
			// –ù–µ –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–≤–µ—Ä—Ö, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –≤–µ—Å—å —Ö–æ—Å—Ç
		}
		finally
		{
			// Graceful shutdown
			await GracefulShutdownAsync();
		}
	}

	/// <summary>
	/// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
	/// </summary>
	private async Task<bool> TryConnectToTelegramAsync(CancellationToken cancellationToken)
	{
		const int maxRetries = 3;
		const int delayBetweenRetriesMs = 5000;

		for (int i = 1; i <= maxRetries; i++)
		{
			try
			{
				logger.LogInformation("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API #{Attempt}", i);
				var isConnected = await archiverService.IsConnectedAsync();
				if (isConnected)
				{
					return true;
				}
			}
			catch (Exception ex)
			{
				logger.LogWarning(ex, "–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è #{Attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å", i);
			}

			if (i < maxRetries && !cancellationToken.IsCancellationRequested)
			{
				await Task.Delay(delayBetweenRetriesMs, cancellationToken);
			}
		}

		return false;
	}

	/// <summary>
	/// –û–∂–∏–¥–∞–Ω–∏–µ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ (–∫–æ–≥–¥–∞ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
	/// </summary>
	private async Task WaitIndefinitelyAsync(CancellationToken stoppingToken)
	{
		logger.LogInformation("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è");
		
		try
		{
			while (!stoppingToken.IsCancellationRequested)
			{
				await Task.Delay(TimeSpan.FromMinutes(1), stoppingToken);
				logger.LogDebug("–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è (Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)");
			}
		}
		catch (OperationCanceledException)
		{
			// –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
		}
	}

	/// <summary>
	/// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	/// </summary>
	private async Task NotifyConfigurationError(CancellationToken cancellationToken)
	{
		try
		{
			await notificationService.SendErrorNotificationAsync("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram", cancellationToken: cancellationToken);
		}
		catch (Exception ex)
		{
			logger.LogError(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
		}
	}

	/// <summary>
	/// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	/// </summary>
	private async Task NotifyConnectionError(CancellationToken cancellationToken)
	{
		try
		{
			await notificationService.SendErrorNotificationAsync("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API", cancellationToken: cancellationToken);
		}
		catch (Exception ex)
		{
			logger.LogError(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
		}
	}

	/// <summary>
	/// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
	/// </summary>
	private async Task InitializeServicesAsync(CancellationToken cancellationToken)
	{
		logger.LogInformation("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...");

		try
		{
			// –£—Å—Ç–∞–Ω–æ–≤–∏–º —Å–µ–±—è –∫–∞–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è bot service
			botService.SetStatusProvider(this);

			// –ó–∞–ø—É—Å–∫ Bot API –¥–ª—è –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
			if (_botConfig.EnableManagementCommands)
			{
				try
				{
					await botService.StartListeningAsync(cancellationToken);
					logger.LogInformation("Bot API –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
				}
				catch (Exception ex)
				{
					logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Bot API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
				}
			}
		}
		catch (Exception ex)
		{
			logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤");
		}
	}

	/// <summary>
	/// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
	/// </summary>
	private async Task RunMainArchivingLoop(CancellationToken stoppingToken)
	{
		var lastReportTime = DateTime.UtcNow;

		while (!stoppingToken.IsCancellationRequested)
		{
			try
			{
				var archiveStartTime = DateTime.UtcNow;
				
				// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
				await PerformArchivingAsync(stoppingToken);

				// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
				await statisticsService.SaveStatisticsAsync();

				// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã
				if (DateTime.UtcNow - lastReportTime > TimeSpan.FromMinutes(_archiveConfig.ReportIntervalMinutes))
				{
					await SendPeriodicReportAsync();
					lastReportTime = DateTime.UtcNow;
				}

				var archiveEndTime = DateTime.UtcNow;
				var archiveDuration = archiveEndTime - archiveStartTime;
				
				logger.LogInformation("–¶–∏–∫–ª –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {Duration:mm\\:ss}", archiveDuration);
			}
			catch (Exception ex)
			{
				logger.LogError(ex, "–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è");
				await statisticsService.RecordErrorAsync("–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è", ex);
				await notificationService.SendErrorNotificationAsync("–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è", ex, stoppingToken);
			}

			// –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
			var delay = TimeSpan.FromMinutes(_archiveConfig.ArchiveIntervalMinutes);
			logger.LogInformation("–°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ {Delay} –º–∏–Ω—É—Ç", _archiveConfig.ArchiveIntervalMinutes);
			
			await Task.Delay(delay, stoppingToken);
		}
	}

	/// <summary>
	/// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
	/// </summary>
	/// <param name="cancellationToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã</param>
	private async Task PerformArchivingAsync(CancellationToken cancellationToken)
	{
		logger.LogInformation("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ü–∏–∫–ª –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è");

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
		if (string.IsNullOrWhiteSpace(_archiveConfig.TargetChat))
		{
			logger.LogWarning("–¶–µ–ª–µ–≤–æ–π —á–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ.");
			return;
		}

		try
		{
			// –ò—â–µ–º —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç
			var targetChat = await archiverService.FindChatAsync(_archiveConfig.TargetChat);
			if (!targetChat.HasValue)
			{
				logger.LogWarning("–¶–µ–ª–µ–≤–æ–π —á–∞—Ç '{TargetChat}' –Ω–µ –Ω–∞–π–¥–µ–Ω", _archiveConfig.TargetChat);
				return;
			}

			var (chatId, chatTitle) = targetChat.Value;
			logger.LogInformation("–ù–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç: {ChatTitle} (ID: {ChatId})", chatTitle, chatId);

			// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
			await syncStateService.SetSyncStatusAsync(chatId, Models.SyncStatus.InProgress);

			// –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç
			await archiverService.ArchiveChatAsync(chatId, cancellationToken);
			
			// –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞
			await statisticsService.RecordArchiveCreatedAsync();
			
			logger.LogInformation("–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ {ChatTitle} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ", chatTitle);

			// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
			await syncStateService.SetSyncStatusAsync(chatId, Models.SyncStatus.Idle);
		}
		catch (Exception ex)
		{
			logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞ {TargetChat}", _archiveConfig.TargetChat);
			
			// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏
			if (!string.IsNullOrEmpty(_archiveConfig.TargetChat))
			{
				var chatInfo = await archiverService.FindChatAsync(_archiveConfig.TargetChat);
				if (chatInfo.HasValue)
				{
					await syncStateService.SetSyncStatusAsync(chatInfo.Value.ChatId, Models.SyncStatus.Error, ex.Message);
				}
			}
			
			throw;
		}

		logger.LogInformation("–¶–∏–∫–ª –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω");
	}

	/// <summary>
	/// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
	/// </summary>
	private async Task SendPeriodicReportAsync()
	{
		try
		{
			var statistics = await statisticsService.GetStatisticsAsync();
			await botService.SendStatisticsReportAsync(statistics);
			
			logger.LogInformation("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
		}
		catch (Exception ex)
		{
			logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞");
		}
	}

	/// <summary>
	/// –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	/// </summary>
	/// <returns>True, –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞</returns>
	private bool ValidateConfiguration()
	{
		if (_telegramConfig.ApiId <= 0)
		{
			logger.LogError("ApiId –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ");
			return false;
		}

		if (string.IsNullOrWhiteSpace(_telegramConfig.ApiHash))
		{
			logger.LogError("ApiHash –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
			return false;
		}

		if (string.IsNullOrWhiteSpace(_telegramConfig.PhoneNumber))
		{
			logger.LogError("PhoneNumber –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
			return false;
		}

		if (string.IsNullOrWhiteSpace(_archiveConfig.OutputPath))
		{
			logger.LogError("OutputPath –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
			return false;
		}

		return true;
	}

	/// <summary>
	/// Graceful shutdown
	/// </summary>
	private async Task GracefulShutdownAsync()
	{
		try
		{
			logger.LogInformation("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ graceful shutdown...");

			// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Bot API
			await botService.StopListeningAsync();

			// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
			await statisticsService.SaveStatisticsAsync();

			logger.LogInformation("Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω");
		}
		catch (Exception ex)
		{
			logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ graceful shutdown");
		}
	}

	/// <summary>
	/// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
	/// </summary>
	/// <param name="cancellationToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã</param>
	public override async Task StopAsync(CancellationToken cancellationToken)
	{
		logger.LogInformation("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram Archiver Service...");
		await base.StopAsync(cancellationToken);
		logger.LogInformation("Telegram Archiver Service –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
	}
}