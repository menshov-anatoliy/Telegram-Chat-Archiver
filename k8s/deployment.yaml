apiVersion: apps/v1
kind: Deployment
metadata:
  name: telegram-archiver
  namespace: telegram-archiver
  labels:
    app.kubernetes.io/name: telegram-archiver
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: archiver
spec:
  replicas: 1  # Один экземпляр для избежания конфликтов с Telegram сессией
  strategy:
    type: Recreate  # Важно для state-ful приложения
  selector:
    matchLabels:
      app.kubernetes.io/name: telegram-archiver
      app.kubernetes.io/component: archiver
  template:
    metadata:
      labels:
        app.kubernetes.io/name: telegram-archiver
        app.kubernetes.io/component: archiver
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: telegram-archiver
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: telegram-archiver
        image: ghcr.io/menshov-anatoliy/telegram-chat-archiver:latest
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        env:
        # Telegram Configuration
        - name: TelegramConfig__ApiId
          valueFrom:
            secretKeyRef:
              name: telegram-archiver-secrets
              key: telegram-api-id
        - name: TelegramConfig__ApiHash
          valueFrom:
            secretKeyRef:
              name: telegram-archiver-secrets
              key: telegram-api-hash
        - name: TelegramConfig__PhoneNumber
          valueFrom:
            secretKeyRef:
              name: telegram-archiver-secrets
              key: telegram-phone-number
        - name: TelegramConfig__SessionFile
          value: "/app/data/session.dat"
        
        # Bot Configuration
        - name: BotConfig__BotToken
          valueFrom:
            secretKeyRef:
              name: telegram-archiver-secrets
              key: telegram-bot-token
        - name: BotConfig__AdminUserId
          valueFrom:
            secretKeyRef:
              name: telegram-archiver-secrets
              key: telegram-admin-user-id
        - name: BotConfig__EnableBotNotifications
          value: "true"
        - name: BotConfig__EnableManagementCommands
          value: "true"
        
        # Archive Configuration
        - name: ArchiveConfig__TargetChat
          valueFrom:
            secretKeyRef:
              name: telegram-archiver-secrets
              key: telegram-target-chat
        - name: ArchiveConfig__ErrorNotificationChat
          valueFrom:
            secretKeyRef:
              name: telegram-archiver-secrets
              key: telegram-target-chat
              optional: true
        
        # Environment
        - name: DOTNET_ENVIRONMENT
          value: "Production"
        - name: ASPNETCORE_URLS
          value: "http://+:8080"
        
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        
        volumeMounts:
        - name: archives
          mountPath: /app/archives
        - name: media
          mountPath: /app/media
        - name: data
          mountPath: /app/data
        - name: logs
          mountPath: /app/logs
        - name: config
          mountPath: /app/appsettings.Production.json
          subPath: appsettings.Production.json
          readOnly: true
        - name: tmp
          mountPath: /tmp
        
        livenessProbe:
          httpGet:
            path: /health/live
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /health/startup
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 12  # 2 минуты на запуск
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
      
      volumes:
      - name: archives
        persistentVolumeClaim:
          claimName: telegram-archiver-archives
      - name: media
        persistentVolumeClaim:
          claimName: telegram-archiver-media
      - name: data
        persistentVolumeClaim:
          claimName: telegram-archiver-data
      - name: logs
        persistentVolumeClaim:
          claimName: telegram-archiver-logs
      - name: config
        configMap:
          name: telegram-archiver-config
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      
      # Политики перезапуска и прерывания
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
      
      # Node selector для специфических узлов (опционально)
      # nodeSelector:
      #   kubernetes.io/os: linux
      
      # Tolerations для узлов с taint (опционально)
      # tolerations:
      # - key: "app"
      #   operator: "Equal"
      #   value: "telegram-archiver"
      #   effect: "NoSchedule"
      
      # Affinity для размещения на определенных узлах (опционально)
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #       - matchExpressions:
      #         - key: node-type
      #           operator: In
      #           values:
      #           - worker